{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aspbo\\\\OneDrive\\\\Desktop\\\\CS35L project\\\\final_proj\\\\CS35L-BruinCalendar\\\\src\\\\components\\\\EventList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { Button } from 'react-bootstrap';\nimport EventDetailWindow from './EventDetailWindow';\nimport { Modal } from './Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const EventList = ({\n  dateClicked: day,\n  dateFormatted: dateFormatted\n}) => {\n  _s();\n\n  const {\n    currentUser\n  } = useAuth();\n  const db = firebase.firestore();\n  const [events, setEvents] = useState([]);\n  const [selectedEvent, setSelectedEvent] = useState(undefined);\n  const [isWindowOpen, setIsWindowOpen] = useState(false);\n\n  const onEventSelected = event => {\n    setSelectedEvent(event);\n    setIsWindowOpen(true);\n  };\n\n  const onCloseDetailWindow = () => {\n    setSelectedEvent(undefined);\n    setIsWindowOpen(false);\n  };\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      const data = await db.collection(\"events\").where('date', '==', day).get();\n      let usersEvents = [];\n\n      for (let item of data.docs) {\n        let event = item.data();\n\n        if (event.userId == currentUser.email || event.guest == currentUser.email) {\n          usersEvents.push(event);\n        }\n      }\n\n      setEvents(usersEvents);\n    };\n\n    fetchEvents();\n  }, [dateFormatted]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Events on \", dateFormatted, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: events.length > 0 ? events.map(event => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Event at \", event.time, \" : \", event.eventName, /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => onEventSelected(event),\n            children: \"Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 18\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No events to display\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isWindowOpen,\n      onClose: onCloseDetailWindow,\n      children: /*#__PURE__*/_jsxDEV(EventDetailWindow, {\n        item: selectedEvent,\n        date: dateFormatted,\n        close: onCloseDetailWindow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(EventList, \"aTmhvy9EG3EEcbEXnvFuAldLS4M=\", false, function () {\n  return [useAuth];\n});\n\n_c = EventList;\nexport default EventList;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventList\");","map":{"version":3,"sources":["C:/Users/aspbo/OneDrive/Desktop/CS35L project/final_proj/CS35L-BruinCalendar/src/components/EventList.js"],"names":["React","useState","useEffect","useAuth","firebase","Button","EventDetailWindow","Modal","EventList","dateClicked","day","dateFormatted","currentUser","db","firestore","events","setEvents","selectedEvent","setSelectedEvent","undefined","isWindowOpen","setIsWindowOpen","onEventSelected","event","onCloseDetailWindow","fetchEvents","data","collection","where","get","usersEvents","item","docs","userId","email","guest","push","length","map","time","eventName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react';\r\nimport {useAuth} from '../contexts/AuthContext'\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/firestore';\r\nimport { Button } from 'react-bootstrap';\r\nimport EventDetailWindow from './EventDetailWindow';\r\nimport { Modal } from  './Modal';\r\n\r\nexport const EventList = ({\r\n  dateClicked: day,\r\n  dateFormatted: dateFormatted,\r\n}) => {\r\n  const { currentUser } = useAuth();\r\n  const db = firebase.firestore();\r\n  const [events, setEvents] = useState([]);\r\n  const [ selectedEvent, setSelectedEvent ] = useState(undefined);\r\n  const [ isWindowOpen, setIsWindowOpen ] = useState(false);\r\n\r\n  const onEventSelected = event => {\r\n    setSelectedEvent(event);\r\n    setIsWindowOpen(true);\r\n  }\r\n\r\n  const onCloseDetailWindow = () => {\r\n    setSelectedEvent(undefined);\r\n    setIsWindowOpen(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n\t\tconst fetchEvents = async () => {\r\n\t\t\tconst data = await db.collection(\"events\").where('date', '==', day).get()\r\n      let usersEvents = [];\r\n      for (let item of data.docs){\r\n        let event = item.data()\r\n        if(event.userId == currentUser.email || event.guest == currentUser.email){\r\n          usersEvents.push(event)\r\n        }\r\n      }\r\n\t\t\tsetEvents(usersEvents)\r\n\t\t}\r\n\t\tfetchEvents()\r\n\t}, [dateFormatted]) \r\n\r\n  return (\r\n    <>\r\n      <h2>Events on { dateFormatted } </h2>\r\n      <ul>\r\n      {events.length > 0\r\n        ? events.map((event) =>\r\n        {\r\n          return <li>Event at {event.time} : {event.eventName}\r\n            <Button onClick={() => onEventSelected(event)}>Details</Button>\r\n          </li>\r\n        })\r\n        : <p>No events to display</p>\r\n      }\r\n      </ul>\r\n      <Modal\r\n        isOpen={isWindowOpen}\r\n        onClose={onCloseDetailWindow}>\r\n        <EventDetailWindow \r\n          item={selectedEvent}\r\n          date={dateFormatted}\r\n          close={onCloseDetailWindow} />\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\nexport default EventList;"]},"metadata":{},"sourceType":"module"}