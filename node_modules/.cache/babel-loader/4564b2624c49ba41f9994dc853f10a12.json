{"ast":null,"code":"var _jsxFileName = \"/Users/ryanalomair/Desktop/cs35/CS35L-BruinCalendar/src/components/FriendList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useAuth } from '../contexts/AuthContext';\nimport { Link, useHistory } from 'react-router-dom';\nimport Users from \"./Users\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport FriendProfile from './FriendProfile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction FriendList() {\n  _s();\n\n  const [error, setError] = useState('');\n  const [friends, setFriends] = useState([]);\n  const history = useHistory();\n  const [listType, setListType] = useState('Friends');\n  const [active, setActive] = useState(false);\n  const [users, setUsers] = useState([]);\n  const {\n    currentUser\n  } = useAuth();\n  const db = firebase.firestore(); //const admin = require('firebase-admin');\n\n  async function addFriend(e, item) {\n    //const theUser = await db.collection(\"users\").where('email', '==', currentUser.email).get()\n    const theUser = db.collection('users').doc(currentUser.email);\n    const unionRes = await theUser.update({\n      friends: firebase.firestore.FieldValue.arrayUnion(item.email)\n    });\n  }\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      if (listType == 'Friends') {\n        const data = await db.collection(\"users\").doc(currentUser.email).get();\n        var theFriends = data.get(\"friends\");\n        setUsers(theFriends);\n        setFriends(theFriends);\n      } else {\n        const data = await db.collection(\"users\").get();\n        setUsers(data.docs.map(doc => doc.data()));\n      }\n    };\n\n    fetchUsers();\n  }, [listType]);\n  let message = '';\n  let listLine;\n\n  if (listType == 'Friends') {\n    listLine = friends.map(user => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [user, /*#__PURE__*/_jsxDEV(Link, {\n          to: {\n            pathname: \"/friendProfile\",\n            uid: user // your data array of objects\n\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            children: \"View Profile\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 22\n      }, this);\n    });\n  } else {\n    listLine = users.map(user => {\n      if (user.email == currentUser.email) {\n        return;\n      }\n\n      if (friends.includes(user.email)) {\n        return;\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [user.email, \" \", /*#__PURE__*/_jsxDEV(Button, {\n          onClick: e => addFriend(e, user),\n          children: \"Add Friend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 39\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 22\n      }, this);\n    });\n  } //let chg = FriendProfile('hdshj');\n\n\n  let chg2 = /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Friendsdfss\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 16\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Friends\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: \"Email: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), \" \", currentUser.email, /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setListType('All'),\n        children: \"All Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setListType('Friends'),\n        children: \"My Friends\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [listType, \": \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: listLine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n\n_s(FriendList, \"wdgm5vXlMkEu44YxExBdFxTsXe4=\", false, function () {\n  return [useHistory, useAuth];\n});\n\n_c = FriendList;\nexport default FriendList;\n\nvar _c;\n\n$RefreshReg$(_c, \"FriendList\");","map":{"version":3,"sources":["/Users/ryanalomair/Desktop/cs35/CS35L-BruinCalendar/src/components/FriendList.jsx"],"names":["React","useRef","useState","useEffect","Form","Button","Alert","useAuth","Link","useHistory","Users","firebase","FriendProfile","FriendList","error","setError","friends","setFriends","history","listType","setListType","active","setActive","users","setUsers","currentUser","db","firestore","addFriend","e","item","theUser","collection","doc","email","unionRes","update","FieldValue","arrayUnion","fetchUsers","data","get","theFriends","docs","map","message","listLine","user","pathname","uid","includes","chg2"],"mappings":"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","sourcesContent":["import React, {useRef, useState, useEffect} from 'react';\nimport { Form, Button, Alert} from 'react-bootstrap';\nimport {useAuth} from '../contexts/AuthContext'\nimport {Link, useHistory} from 'react-router-dom'\nimport Users from \"./Users\"\nimport firebase from 'firebase/app'\nimport 'firebase/firestore';\nimport FriendProfile from './FriendProfile';\n\nfunction FriendList() {\n\tconst [error, setError] = useState('') \n\tconst [friends, setFriends] = useState([]) \n\tconst history = useHistory()\n    const [listType, setListType] = useState('Friends')\n    const [active, setActive] = useState(false)\n\tconst [users, setUsers] = useState([]) \n\tconst { currentUser } = useAuth()\n    const db = firebase.firestore()\n    //const admin = require('firebase-admin');\n\n\tasync function addFriend(e,item){\n        //const theUser = await db.collection(\"users\").where('email', '==', currentUser.email).get()\n        const theUser = db.collection('users').doc(currentUser.email);\n\n        const unionRes = await theUser.update({\n            friends: firebase.firestore.FieldValue.arrayUnion(item.email)\n          });\n    }\n\n\tuseEffect(() => {\n\t\tconst fetchUsers = async () => {\n\n\t\t\tif (listType == 'Friends')\n\t\t\t{\n\t\t\t\tconst data = await db.collection(\"users\").doc(currentUser.email).get()\n                var theFriends = data.get(\"friends\");\n                setUsers(theFriends);\n                setFriends(theFriends);\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tconst data = await db.collection(\"users\").get()\n\t\t\t\tsetUsers(data.docs.map(doc => doc.data()))\n\t\t\t}\n\t\t}\n\t\tfetchUsers()\n\t}, [listType])\n\n    let message = ''\n    let listLine; \n    if (listType == 'Friends') {\n\n        listLine = friends.map(user => {\n              return <li>{user} \n              <Link to={{\n                pathname: \"/friendProfile\",\n                uid: user // your data array of objects\n                }}>\n                <Button>View Profile</Button>\n              </Link> </li>\n          })\n    } \n    else {\n        listLine = users.map(user => {\n            if(user.email == currentUser.email){\n                return\n            }\n            if(friends.includes(user.email)){\n                return\n            }\n              return <li>{user.email} <Button onClick={e => addFriend(e,user)}>Add Friend</Button> </li>\n          })\n    }\n\n    //let chg = FriendProfile('hdshj');\n    let chg2 = <h2>Friendsdfss</h2>;\n\n    return (\n\t  \t<>\n\t  \t\t<h2>Friends</h2>\n            <strong>Email: </strong> {currentUser.email}\n\t  \t\t<div>\n\t  \t\t\t<Button onClick={() => setListType('All')}>All Users</Button>\n                <Button onClick={() => setListType('Friends')}>My Friends</Button>\n\t  \t\t</div>\n\t\t\t<div> \n\t  \t\t\t<strong>{listType}: </strong> \n\t  \t\t\t<ul>\n                    {listLine}\n\t  \t\t\t</ul>   \n\t\t\t</div>\n\t  \t</>\n  \t);\n}\nexport default FriendList;"]},"metadata":{},"sourceType":"module"}