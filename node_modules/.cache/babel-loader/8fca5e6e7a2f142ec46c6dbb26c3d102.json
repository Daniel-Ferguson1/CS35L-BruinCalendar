{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aspbo\\\\OneDrive\\\\Desktop\\\\CS35L project\\\\final_proj\\\\CS35L-BruinCalendar\\\\src\\\\components\\\\FriendProfile.jsx\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useAuth } from '../contexts/AuthContext';\nimport { Link, useHistory } from 'react-router-dom';\nimport Users from \"./Users\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore'; // import { BiExitFullscreen } from 'react-icons/bi';\n// import AddFriendEvent from './AddFriendEvent';\n// import { RiTreasureMapLine } from 'react-icons/ri';\n\nimport EventDetailWindow from './EventDetailWindow';\nimport { Modal } from './Modal';\nimport Sidebar from '../feature/Sidebar';\nimport './FriendList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass FriendProfile extends React.Component {\n  constructor() {\n    super();\n\n    this.onEventSelected = event => {\n      this.setState({\n        selectedEvent: event,\n        isWindowOpen: true,\n        dateFormatted: event.date\n      });\n    };\n\n    this.onCloseDetailWindow = () => {\n      this.setState({\n        selectedEvent: undefined,\n        isWindowOpen: false\n      });\n    };\n\n    const events = [];\n    this.state = {\n      eventsPersonal: [],\n      eventsJoint: [],\n      book: false,\n      selectedEvent: undefined,\n      isWindowOpen: false,\n      dateFormatted: ''\n    };\n  }\n\n  async getEvents(uid, currentUser) {\n    let db = firebase.firestore();\n    let data = await db.collection('events').where('userId', '==', uid).get();\n    let data3 = await db.collection('events').where('userId', '==', uid).get().then(queryDocumentSnapshot => {\n      queryDocumentSnapshot.forEach(doc => {//console.log(doc.id)\n        //setUsers(doc.get('friends'));\n      });\n    });\n    let data2 = await db.collection('events').where('guest', '==', uid).get();\n    let singleEvents = [];\n    let jointEvents = [];\n\n    for (let item of data2.docs) {\n      let event = item.data(); //console.log(event)\n\n      if (event.userId == currentUser.email) {\n        jointEvents.push(event);\n      }\n    }\n\n    for (let item of data.docs) {\n      let event = item.data();\n\n      if (event.jointEvent && event.guest == currentUser.email) {\n        jointEvents.push(event);\n      } else if (!event.jointEvent) {\n        singleEvents.push(event);\n      }\n    }\n\n    this.setState({\n      eventsPersonal: singleEvents,\n      eventsJoint: jointEvents\n    });\n  }\n\n  render() {\n    const {\n      stateData\n    } = this.props.location;\n    let uid = stateData.user;\n    let currentUser = stateData.currentUser; //console.log(currentUser)\n\n    this.getEvents(uid, currentUser);\n    let returnView1;\n    let returnView2;\n\n    if (this.state.eventsPersonal.length == 0) {\n      returnView1 = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No events to display\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 26\n      }, this);\n    } else {\n      returnView1 = this.state.eventsPersonal.map(event => {\n        //console.log(event.uid)\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [event.eventName, /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => this.onEventSelected(event),\n            children: \"Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 22\n        }, this);\n      });\n    }\n\n    if (this.state.eventsJoint.length == 0) {\n      returnView2 = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No events to display\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 26\n      }, this);\n    } else {\n      returnView2 = this.state.eventsJoint.map(event => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: event.eventName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 22\n        }, this);\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"FriendList\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"User: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 17\n          }, this), \" \", uid]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"User's Personal Events\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: returnView1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Joint Events\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: returnView2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: {\n              pathname: \"/bookTime\",\n              friendId: uid // your data array of objects\n\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              children: \"Book Time With This Friend!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          isOpen: this.state.isWindowOpen,\n          onClose: this.state.onCloseDetailWindow,\n          children: /*#__PURE__*/_jsxDEV(EventDetailWindow, {\n            item: this.state.selectedEvent,\n            date: this.state.dateFormatted,\n            close: this.state.onCloseDetailWindow\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  }\n\n} //<Button onClick={() => setListType('All')}>All Users</Button>\n\n\nexport default FriendProfile;","map":{"version":3,"sources":["C:/Users/aspbo/OneDrive/Desktop/CS35L project/final_proj/CS35L-BruinCalendar/src/components/FriendProfile.jsx"],"names":["React","useRef","useState","useEffect","Form","Button","Alert","useAuth","Link","useHistory","Users","firebase","EventDetailWindow","Modal","Sidebar","FriendProfile","Component","constructor","onEventSelected","event","setState","selectedEvent","isWindowOpen","dateFormatted","date","onCloseDetailWindow","undefined","events","state","eventsPersonal","eventsJoint","book","getEvents","uid","currentUser","db","firestore","data","collection","where","get","data3","then","queryDocumentSnapshot","forEach","doc","data2","singleEvents","jointEvents","item","docs","userId","email","push","jointEvent","guest","render","stateData","props","location","user","returnView1","returnView2","length","map","eventName","pathname","friendId"],"mappings":"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","sourcesContent":["import React, {useRef, useState, useEffect} from 'react';\r\nimport { Form, Button, Alert} from 'react-bootstrap';\r\nimport {useAuth} from '../contexts/AuthContext'\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport Users from \"./Users\"\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/firestore';\r\n// import { BiExitFullscreen } from 'react-icons/bi';\r\n// import AddFriendEvent from './AddFriendEvent';\r\n// import { RiTreasureMapLine } from 'react-icons/ri';\r\nimport EventDetailWindow from './EventDetailWindow';\r\nimport { Modal } from  './Modal';\r\nimport Sidebar from '../feature/Sidebar';\r\nimport './FriendList.css'\r\n\r\n\r\nclass FriendProfile extends React.Component {\r\n    constructor() {\r\n      super()\r\n      const events = [];\r\n      this.state = {\r\n        eventsPersonal: [],\r\n        eventsJoint: [],\r\n        book: false,\r\n        selectedEvent: undefined,\r\n        isWindowOpen: false,\r\n        dateFormatted: '',\r\n      }\r\n    }\r\n\r\n    onEventSelected = event => {\r\n      this.setState({\r\n\r\n        selectedEvent: event,\r\n        isWindowOpen: true,\r\n        dateFormatted: event.date\r\n      });\r\n    }\r\n    onCloseDetailWindow = () => {\r\n      this.setState({\r\n\r\n        selectedEvent: undefined,\r\n        isWindowOpen: false,\r\n      });\r\n    }\r\n\r\n  async getEvents(uid, currentUser) {\r\n    let db = firebase.firestore();\r\n    let data = await db.collection('events').where('userId', '==', uid).get()\r\n    let data3 = await db.collection('events').where('userId', '==', uid).get()\r\n    .then((queryDocumentSnapshot) => {\r\n      queryDocumentSnapshot.forEach((doc) => {\r\n        //console.log(doc.id)\r\n        //setUsers(doc.get('friends'));\r\n      })\r\n    })\r\n    let data2 = await db.collection('events').where('guest', '==', uid).get()\r\n    let singleEvents = [];\r\n    let jointEvents = [];\r\n    for (let item of data2.docs){\r\n      let event = item.data()\r\n      //console.log(event)\r\n      if(event.userId == currentUser.email){\r\n        jointEvents.push(event)\r\n      }\r\n    }\r\n    for (let item of data.docs){\r\n      let event = item.data()\r\n      if(event.jointEvent && event.guest == currentUser.email){\r\n        jointEvents.push(event)\r\n      }\r\n      else if(!event.jointEvent){\r\n        singleEvents.push(event)\r\n      }\r\n    }\r\n    this.setState({\r\n      eventsPersonal: singleEvents,\r\n      eventsJoint: jointEvents,\r\n    });\r\n  }\r\n  \r\n  render(){\r\n        const { stateData } = this.props.location\r\n        let uid = stateData.user\r\n        let currentUser = stateData.currentUser\r\n        //console.log(currentUser)\r\n        this.getEvents(uid, currentUser);\r\n        let returnView1;\r\n        let returnView2;\r\n\r\n        if(this.state.eventsPersonal.length == 0){\r\n          returnView1 =  <p>No events to display</p>\r\n        }\r\n        else{\r\n          returnView1 = this.state.eventsPersonal.map((event) =>\r\n            {\r\n              \r\n              //console.log(event.uid)\r\n              return <li>{event.eventName}\r\n                <Button onClick={() => this.onEventSelected(event)}>Details</Button>\r\n              </li>\r\n            })\r\n        }\r\n\r\n        if(this.state.eventsJoint.length == 0){\r\n          returnView2 =  <p>No events to display</p>\r\n        }\r\n        else{\r\n          returnView2 = this.state.eventsJoint.map((event) =>\r\n            {\r\n              return <li>{event.eventName}</li>\r\n            })\r\n        }\r\n      return (\r\n        <>\r\n          <div>\r\n            <Sidebar />\r\n          </div>\r\n          <div className=\"FriendList\">\r\n            <h2><strong>User: </strong> {uid}</h2>\r\n            <div>\r\n              <strong>User's Personal Events</strong>\r\n              <ul>\r\n                {returnView1}\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              <strong>Joint Events</strong>\r\n              <ul>\r\n                {returnView2}\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              <Link to={{\r\n                pathname: \"/bookTime\",\r\n                friendId: uid // your data array of objects\r\n                }}>\r\n                <Button>Book Time With This Friend!</Button>\r\n              </Link>\r\n            </div>\r\n            <Modal\r\n              isOpen={this.state.isWindowOpen}\r\n              onClose={this.state.onCloseDetailWindow}>\r\n              <EventDetailWindow \r\n                item={this.state.selectedEvent}\r\n                date={this.state.dateFormatted}\r\n                close={this.state.onCloseDetailWindow} />\r\n            </Modal>\r\n          </div>\r\n        </>\r\n      )\r\n  }\r\n}\r\n//<Button onClick={() => setListType('All')}>All Users</Button>\r\n\r\nexport default FriendProfile;"]},"metadata":{},"sourceType":"module"}