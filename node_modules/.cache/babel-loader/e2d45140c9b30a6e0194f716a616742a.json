{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aspbo\\\\OneDrive\\\\Desktop\\\\CS35L project\\\\final_proj\\\\CS35L-BruinCalendar\\\\src\\\\components\\\\AddComment.jsx\",\n    _s = $RefreshSig$();\n\n// import React, {useRef, useState} from 'react';\n// import { Form, Button, Alert} from 'react-bootstrap';\n// import {useAuth} from '../contexts/AuthContext'\n// import {Link, useHistory} from 'react-router-dom'\n// import firebase from 'firebase/app'\n// import Sidebar from '../feature/Sidebar';\n// import Header from './Header';\n// import 'firebase/firestore';\n// // comments collection fields:\n// // eventId (string) : hash of the event \n// // text    (string) : comment\n// // email   (string) : email of the user who commented on this eventId\n// export const AddComment = ({ eventId: eventId }) => {\n// \tconst dateRef = useRef();\n// \tconst timeRef = useRef();\n// \tconst nameRef = useRef();\n//     const descriptionRef = useRef();\n// \tconst commentRef = useRef();\n// \tconst {currentUser} = useAuth()\n// \tconst [error, setError] = useState('')\n// \tconst [loading, setLoading] = useState(false)\n// \tconst history = useHistory()\n// \tasync function handleSubmit(e) {\n// \t\te.preventDefault()\n// \t\ttry{\n// \t\t\tsetError(\"\");\n// \t\t\tsetLoading(true);\n// \t\t\tconst db = firebase.firestore()\n//             let date = dateRef.current.value\n//             let time = timeRef.current.value\n//             let name = nameRef.current.value\n//             let desc = descriptionRef.current.value\n// \t\t\tlet comment = commentRef.current.value\n//             let nameArray = name.split(' ')\n// \t\t\t//console.log(nameArray)\n//             let descArray = desc.split(' ')\n//             let searchArray = nameArray.concat(descArray)\n// \t\t\tconst data = {\n// \t\t\t\tdate: date,\n// \t\t\t\ttime: time,\n// \t\t\t\tuserId: currentUser.email,\n// \t\t\t\teventName: name,\n//                 description: desc,\n// \t\t\t\tcommentList: comment,\n// \t\t\t\tsearchValues: searchArray,\n// \t\t\t\tjointEvent: false,\n// \t\t\t\tguest: '',\n// \t\t\t  };\n// \t\t\tlet collectionRef = db.collection('events');\n// \t\t\tlet theID = 0;\n// \t\t\tawait collectionRef.add(data).then(documentReference => {\n// \t\t\t\ttheID = documentReference.id\n// \t\t\t\t//console.log(`Added document with name '${documentReference.id}'`);\n// \t\t\t});\n// \t\t\t//const res = await db.collection('events').doc().set(data);\n// \t\t\tconst cityRef = db.collection('events').doc(theID);\n// \t\t\tconst res = await cityRef.set({\n//   \t\t\t\teventId: theID\n// \t\t\t}, { merge: true });\n// \t\t\t//console.log(theID)\n// \t\t\thistory.push(\"/\")\n// \t\t}\n// \t\tcatch(err){\n// \t\t\tconsole.log(err)\n// \t\t\tsetError(\"Failed to add event\");\n// \t\t}\n// \t\tsetLoading(false);\n// \t}\n// \treturn ( \n// \t\t<>\n// \t  \t<div>\n//           <Sidebar />\n//           <Header />\n// \t\t</div>\n// \t\t<div className=\"addEvent\">\n// \t\t <h2>Create Event</h2>\n// \t\t {error && <Alert variant=\"danger\">{error}</Alert>}\n// \t\t <Form onSubmit={handleSubmit}>\n// \t\t  <Form.Group id=\"date\">\n// \t\t  \t<Form.Label>Date: </Form.Label>\n// \t\t  \t<Form.Control type=\"date\" ref={dateRef} required />\n// \t\t  </Form.Group>\n//           <Form.Group id=\"time\">\n// \t\t  \t<Form.Label>Time: </Form.Label>\n// \t\t  \t<Form.Control type=\"time\" ref={timeRef} required />\n// \t\t  </Form.Group>\n// \t\t  <Form.Group id=\"name\">\n// \t\t  \t\t<Form.Label>Event Name: </Form.Label>\n// \t\t  \t\t<Form.Control ref={nameRef} required />\n// \t\t  </Form.Group>\n// \t\t    <Form.Group id=\"description\">\n// \t\t  \t\t<Form.Label>Event Description: </Form.Label>\n// \t\t  \t\t<Form.Control ref={descriptionRef} />\n// \t\t  \t</Form.Group>\n// \t\t\t  <Form.Group id=\"comment\">\n// \t\t  \t\t<Form.Label>Comments: </Form.Label>\n// \t\t  \t\t<Form.Control ref={commentRef} required />\n// \t\t  </Form.Group>\n// \t\t  \t<Button disabled={loading} type=\"submit\">Add Event: </Button>\n// \t\t</Form>\n// \t  </div> \n// \t  <div className=\"addEvent\">\n// \t  \tNo longer need to schedule an event? <Link to=\"/\">Cancel </Link>\n// \t  </div>\n// \t  </>\n// \t);\n// }\n// export default AddComment;\nimport React, { useRef, useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useHistory } from 'react-router-dom';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AddComment = ({\n  eventId\n}) => {\n  _s();\n\n  const commentRef = useRef();\n  const [error, setError] = useState('');\n  const {\n    currentUser\n  } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  async function handleComments(str) {\n    str.preventDefault();\n\n    try {\n      setError(\"\");\n      setLoading(true);\n      const db = firebase.firestore();\n      let comment = commentRef.current.value;\n      let commentArray = comment.split('LISTBREAK');\n      const data = {\n        comments: commentArray,\n        userId: currentUser.uid\n      };\n      const res = await db.collection('comments').doc().set(data);\n      history.push(\"/\");\n    } catch (err) {\n      console.log(err);\n      setError(\"Failed to add comment\");\n    }\n\n    setLoading(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleComments,\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        id: \"comment\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Add Comment: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 7\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 46\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          ref: commentRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      disabled: loading,\n      type: \"submit\",\n      id: \"button\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 4\n  }, this);\n};\n\n_s(AddComment, \"UP7eRmfqrwBoQV/A/D16T5xIBRQ=\", false, function () {\n  return [useAuth, useHistory];\n});\n\n_c = AddComment;\nexport default AddComment;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddComment\");","map":{"version":3,"sources":["C:/Users/aspbo/OneDrive/Desktop/CS35L project/final_proj/CS35L-BruinCalendar/src/components/AddComment.jsx"],"names":["React","useRef","useState","Form","Button","Alert","useAuth","useHistory","firebase","AddComment","eventId","commentRef","error","setError","currentUser","loading","setLoading","history","handleComments","str","preventDefault","db","firestore","comment","current","value","commentArray","split","data","comments","userId","uid","res","collection","doc","set","push","err","console","log"],"mappingseC,MAAf,EAAuBC,QAAvB,QAAsC,OAAtC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,QAAmC,iBAAnC;AACA,SAAQC,OAAR,QAAsB,yBAAtB;AACA,SAASC,UAAT,QAA0B,kBAA1B;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;;AAEA,OAAO,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AAC1C,QAAMC,UAAU,GAAGV,MAAM,EAAzB;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAACY,IAAAA;AAAD,MAAgBR,OAAO,EAA7B;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMe,OAAO,GAAGV,UAAU,EAA1B;;AAIA,iBAAeW,cAAf,CAA8BC,GAA9B,EAAmC;AAClCA,IAAAA,GAAG,CAACC,cAAJ;;AACA,QAAG;AACFP,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAG,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMK,EAAE,GAAGb,QAAQ,CAACc,SAAT,EAAX;AACS,UAAIC,OAAO,GAAGZ,UAAU,CAACa,OAAX,CAAmBC,KAAjC;AACT,UAAIC,YAAY,GAAGH,OAAO,CAACI,KAAR,CAAc,WAAd,CAAnB;AAEA,YAAMC,IAAI,GAAG;AACAC,QAAAA,QAAQ,EAAEH,YADV;AAEZI,QAAAA,MAAM,EAAEhB,WAAW,CAACiB;AAFR,OAAb;AAIA,YAAMC,GAAG,GAAG,MAAMX,EAAE,CAACY,UAAH,CAAc,UAAd,EAA0BC,GAA1B,GAAgCC,GAAhC,CAAoCP,IAApC,CAAlB;AACAX,MAAAA,OAAO,CAACmB,IAAR,CAAa,GAAb;AACA,KAbD,CAcA,OAAMC,GAAN,EAAU;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAxB,MAAAA,QAAQ,CAAC,uBAAD,CAAR;AACA;;AACDG,IAAAA,UAAU,CAAC,KAAD,CAAV;AACA;;AAED,sBACE;AAAA,eACCJ,KAAK,iBAAI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAC,QAAf;AAAA,gBAAyBA;AAAzB;AAAA;AAAA;AAAA;AAAA,YADV,eAEA,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEM,cAAhB;AAAA,6BACG,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,EAAE,EAAC,SAAf;AAAA,gCACA,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,oBACuC;AAAA;AAAA;AAAA;AAAA,gBADvC,eAEA,QAAC,IAAD,CAAM,OAAN;AAAc,UAAA,GAAG,EAAEP;AAAnB;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,YAFA,eAQA,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEI,OAAlB;AAA2B,MAAA,IAAI,EAAC,QAAhC;AAAyC,MAAA,EAAE,EAAC,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYA,CA5CM;;GAAMN,U;UAGUH,O,EAENC,U;;;KALJE,U;AA8Cb,eAAeA,UAAf","sourcesContent":["// import React, {useRef, useState} from 'react';\r\n// import { Form, Button, Alert} from 'react-bootstrap';\r\n// import {useAuth} from '../contexts/AuthContext'\r\n// import {Link, useHistory} from 'react-router-dom'\r\n// import firebase from 'firebase/app'\r\n// import Sidebar from '../feature/Sidebar';\r\n// import Header from './Header';\r\n// import 'firebase/firestore';\r\n\r\n\r\n// // comments collection fields:\r\n// // eventId (string) : hash of the event \r\n// // text    (string) : comment\r\n// // email   (string) : email of the user who commented on this eventId\r\n// export const AddComment = ({ eventId: eventId }) => {\r\n// \tconst dateRef = useRef();\r\n// \tconst timeRef = useRef();\r\n// \tconst nameRef = useRef();\r\n//     const descriptionRef = useRef();\r\n// \tconst commentRef = useRef();\r\n// \tconst {currentUser} = useAuth()\r\n// \tconst [error, setError] = useState('')\r\n// \tconst [loading, setLoading] = useState(false)\r\n// \tconst history = useHistory()\r\n\r\n// \tasync function handleSubmit(e) {\r\n// \t\te.preventDefault()\r\n// \t\ttry{\r\n// \t\t\tsetError(\"\");\r\n// \t\t\tsetLoading(true);\r\n// \t\t\tconst db = firebase.firestore()\r\n//             let date = dateRef.current.value\r\n//             let time = timeRef.current.value\r\n//             let name = nameRef.current.value\r\n//             let desc = descriptionRef.current.value\r\n// \t\t\tlet comment = commentRef.current.value\r\n//             let nameArray = name.split(' ')\r\n// \t\t\t//console.log(nameArray)\r\n//             let descArray = desc.split(' ')\r\n//             let searchArray = nameArray.concat(descArray)\r\n            \r\n// \t\t\tconst data = {\r\n// \t\t\t\tdate: date,\r\n// \t\t\t\ttime: time,\r\n// \t\t\t\tuserId: currentUser.email,\r\n// \t\t\t\teventName: name,\r\n//                 description: desc,\r\n// \t\t\t\tcommentList: comment,\r\n// \t\t\t\tsearchValues: searchArray,\r\n// \t\t\t\tjointEvent: false,\r\n// \t\t\t\tguest: '',\r\n\r\n// \t\t\t  };\r\n// \t\t\tlet collectionRef = db.collection('events');\r\n// \t\t\tlet theID = 0;\r\n// \t\t\tawait collectionRef.add(data).then(documentReference => {\r\n// \t\t\t\ttheID = documentReference.id\r\n// \t\t\t\t//console.log(`Added document with name '${documentReference.id}'`);\r\n// \t\t\t});\r\n// \t\t\t//const res = await db.collection('events').doc().set(data);\r\n// \t\t\tconst cityRef = db.collection('events').doc(theID);\r\n\r\n// \t\t\tconst res = await cityRef.set({\r\n//   \t\t\t\teventId: theID\r\n// \t\t\t}, { merge: true });\r\n// \t\t\t//console.log(theID)\r\n// \t\t\thistory.push(\"/\")\r\n// \t\t}\r\n// \t\tcatch(err){\r\n// \t\t\tconsole.log(err)\r\n// \t\t\tsetError(\"Failed to add event\");\r\n// \t\t}\r\n// \t\tsetLoading(false);\r\n// \t}\r\n\r\n// \treturn ( \r\n// \t\t<>\r\n// \t  \t<div>\r\n//           <Sidebar />\r\n//           <Header />\r\n// \t\t</div>\r\n\r\n// \t\t<div className=\"addEvent\">\r\n// \t\t <h2>Create Event</h2>\r\n// \t\t {error && <Alert variant=\"danger\">{error}</Alert>}\r\n// \t\t <Form onSubmit={handleSubmit}>\r\n// \t\t  <Form.Group id=\"date\">\r\n// \t\t  \t<Form.Label>Date: </Form.Label>\r\n// \t\t  \t<Form.Control type=\"date\" ref={dateRef} required />\r\n// \t\t  </Form.Group>\r\n\r\n//           <Form.Group id=\"time\">\r\n// \t\t  \t<Form.Label>Time: </Form.Label>\r\n// \t\t  \t<Form.Control type=\"time\" ref={timeRef} required />\r\n// \t\t  </Form.Group>\r\n\r\n// \t\t  <Form.Group id=\"name\">\r\n// \t\t  \t\t<Form.Label>Event Name: </Form.Label>\r\n// \t\t  \t\t<Form.Control ref={nameRef} required />\r\n// \t\t  </Form.Group>\r\n\r\n// \t\t    <Form.Group id=\"description\">\r\n// \t\t  \t\t<Form.Label>Event Description: </Form.Label>\r\n// \t\t  \t\t<Form.Control ref={descriptionRef} />\r\n// \t\t  \t</Form.Group>\r\n\r\n// \t\t\t  <Form.Group id=\"comment\">\r\n// \t\t  \t\t<Form.Label>Comments: </Form.Label>\r\n// \t\t  \t\t<Form.Control ref={commentRef} required />\r\n// \t\t  </Form.Group>\r\n\r\n// \t\t  \t<Button disabled={loading} type=\"submit\">Add Event: </Button>\r\n// \t\t</Form>\r\n// \t  </div> \r\n\t  \r\n// \t  <div className=\"addEvent\">\r\n// \t  \tNo longer need to schedule an event? <Link to=\"/\">Cancel </Link>\r\n// \t  </div>\r\n// \t  </>\r\n\r\n// \t);\r\n// }\r\n\r\n// export default AddComment;\r\n\r\nimport React, {useRef, useState} from 'react';\r\nimport { Form, Button, Alert} from 'react-bootstrap';\r\nimport {useAuth} from '../contexts/AuthContext'\r\nimport { useHistory} from 'react-router-dom'\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/firestore';\r\n\r\nexport const AddComment = ({ eventId }) => {\r\n\tconst commentRef = useRef();\r\n\tconst [error, setError] = useState('')\r\n\tconst {currentUser} = useAuth()\r\n\tconst [loading, setLoading] = useState(false)\r\n\tconst history = useHistory()\r\n\r\n\r\n\r\n\tasync function handleComments(str) {\r\n\t\tstr.preventDefault()\r\n\t\ttry{\r\n\t\t\tsetError(\"\");\r\n\t\t\tsetLoading(true);\r\n\t\t\tconst db = firebase.firestore()\r\n            let comment = commentRef.current.value\r\n\t\t\tlet commentArray = comment.split('LISTBREAK')\r\n\r\n\t\t\tconst data = {\r\n                comments: commentArray,\r\n\t\t\t\tuserId: currentUser.uid\r\n\t\t\t  };\r\n\t\t\tconst res = await db.collection('comments').doc().set(data);\r\n\t\t\thistory.push(\"/\")\r\n\t\t}\r\n\t\tcatch(err){\r\n\t\t\tconsole.log(err)\r\n\t\t\tsetError(\"Failed to add comment\");\r\n\t\t}\r\n\t\tsetLoading(false);\r\n\t}\r\n\r\n\treturn ( \r\n\t  <div>\r\n\t\t {error && <Alert variant=\"danger\">{error}</Alert>}\r\n\t\t <Form onSubmit={handleComments}>\r\n\t\t    <Form.Group id=\"comment\">\r\n\t\t  \t\t<Form.Label>Add Comment: </Form.Label> <br></br>\r\n\t\t  \t\t<Form.Control ref={commentRef} />\r\n\t\t  \t</Form.Group>\r\n\t\t\t</Form>\r\n\t\t\t<Button disabled={loading} type=\"submit\" id=\"button\">Submit</Button>\r\n\t  </div> \r\n\t);\r\n}\r\n\r\nexport default AddComment;"]},"metadata":{},"sourceType":"module"}